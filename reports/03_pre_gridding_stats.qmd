---
title: "pre_gridding_stats"
author: V. Hermanson
format: html
editor: visual
---

## Libraries

```{r}
library(ggplot2)
library(ggmap)
library(dplyr)
library(geosphere)
library(stringr)
library(sp)
```

## Import data

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{# underway/transect data}
underway_data <- read.csv("data/Cruise_Transect_Header_merged_withfixes.csv", header = TRUE) %>% 
  subset(!is.na(as.numeric(Latitude.Start)) & 
           !is.na(as.numeric(Longitude.Start))) %>% 
  mutate(Latitude.Start = as.numeric(Latitude.Start), 
         Longitude.Start = as.numeric(Longitude.Start)) %>% 
  mutate(Latitude.Start = -abs(as.numeric(Latitude.Start)), 
         Longitude.Start = -abs(as.numeric(Longitude.Start)))
underway_data$Cruise <- factor(underway_data$Cruise, levels = unique(underway_data$Cruise))
  levels(underway_data$Cruise) <- c(1993:2019, 2021:2024)

# observation data
obvs_data <- read.csv("data/Cruise_Transect_Observations_merged.csv", header = TRUE) %>% 
  mutate(Count.Minute = as.numeric(Count.Minute))

# station data
station_data <- read.csv("data/LTERStns.csv", header = TRUE)

```

## Calculating distnace between lat/long

```{r}
# create a matrix of coordinates for all points
coordinates <- cbind(underway_data$Longitude.Start, underway_data$Latitude.Start)

# compute distances between consecutive points
distances <- distHaversine(coordinates[-nrow(coordinates), ], coordinates[-1, ])
underway_data$Distance <- c(distances, NA) 

# plotting distances btwn lat/long coordinates
plot(underway_data$Longitude.Start, underway_data$Latitude.Start, type = "n", 
     xlab = "Longitude", ylab = "Latitude", main = "Lat/Long and Distances")

# draw lines between consecutive points
for (i in 1:(nrow(underway_data) - 1)) {
  segments(underway_data$Longitude.Start[i], underway_data$Latitude.Start[i],
           underway_data$Longitude.Start[i + 1], underway_data$Latitude.Start[i + 1],
           col = "lightblue", lwd = 2)
}
# add points to the plot
points(underway_data$Longitude.Start, underway_data$Latitude.Start, pch = 19, col = "maroon")
```

## Histogram of dates

```{r}
# create a matrix of coordinates for all points
coordinates <- cbind(underway_data$Longitude.Start, underway_data$Latitude.Start)

# compute distances between consecutive points
distances <- distHaversine(coordinates[-nrow(coordinates), ], coordinates[-1, ])
underway_data$Distance <- c(distances, NA) 
```

## Histogram of dates

First, split the Date/Time into separate columns

```{r}
## separating the Date/Time column contents into separate columns
# extract the Julian day, hour, and minute from the `YearDay.Hour.Minute column
underway_data <- underway_data %>%
  mutate(YearDay.Hour.Minute = str_pad(as.character(YearDay.Hour.Minute), width = 7, pad = "0"),  # Pad to 7 characters
         JulianDay = substr(YearDay.Hour.Minute, 1, 3),  # First 3 characters for JulianDay
         Hour = substr(YearDay.Hour.Minute, 4, 5),       # Next 2 characters for Hour
         Minute = substr(YearDay.Hour.Minute, 6, 7))     # Last 2 characters for Minute
```

Then create histogram for dates

```{r}
## histogram of dates
underway_data$JulianDay <- as.numeric(underway_data$JulianDay)
ggplot(underway_data, aes(x = JulianDay)) + 
  geom_histogram(binwidth = 1, fill = "lightcoral", color = "black") +
  labs(title = "Histogram of Dates", x = "Date", y = "Frequency") +
  theme_minimal() +
  scale_x_date(date_labels = "%b %d", date_breaks = "1 week")  # Adjust for date labels and breaks

```

## Histogram of hours

With outliers

```{r}
underway_data$Hour <- as.numeric(underway_data$Hour)
# histogram with outliers
underway_data$Hour <- as.numeric(underway_data$Hour)
hist(underway_data$Hour, breaks = 24, col = "lightblue", 
     main = "Histogram of Hours", xlab = "Hour of Day", ylab = "Frequency")
mean((underway_data$Hour), na.rm = TRUE)
```

Without outliers

```{r}
# calculate Q1, Q3, and IQR (difference btwn Q3 and Q1)
Q1 <- quantile(underway_data$Hour, 0.25, na.rm = TRUE)
Q3 <- quantile(underway_data$Hour, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1

# define the lower and upper bounds for outliers
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR

# filter out the outliers
underway_data_filtered <- underway_data %>%
  filter(Minute >= lower_bound & Minute <= upper_bound)

## histogram of hours
underway_data$Hour <- (underway_data$Hour)
hist(underway_data$Hour, breaks = 24, col = "lightblue", 
     main = "Histogram of Hours", xlab = "Hour of Day", ylab = "Frequency")
mean((underway_data$Hour), na.rm = TRUE)
```

## Histogram of Minutes

With outliers

```{r}
underway_data$Minute <- (underway_data$Minute)
## histogram of minutes with outliers
underway_data$Minute <- (underway_data$Minute)
ggplot(underway_data, aes(x = Minute)) + 
  geom_histogram(binwidth = 1, fill = "lightgreen", color = "black") +
  labs(title = "Histogram of Minutes", x = "Minute", y = "Frequency") +
  theme_minimal()
mean((underway_data$Minute), na.rm = TRUE)

```

Without outliers

```{r}

# calculate Q1, Q3, and IQR (difference btwn Q3 and Q1)
Q1 <- quantile(underway_data$Minute, 0.25, na.rm = TRUE)
Q3 <- quantile(underway_data$Minute, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1

# define the lower and upper bounds for outliers
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR

# filter out the outliers
underway_data_filtered <- underway_data %>%
  filter(Minute >= lower_bound & Minute <= upper_bound)

# plot histogram after removing outliers
ggplot(underway_data_filtered, aes(x = Minute)) + 
  geom_histogram(binwidth = 1, fill = "lightgreen", color = "black") +
  labs(title = "Histogram of Minutes (Outliers Removed)", x = "Minute", y = "Frequency") +
  theme_minimal()

```

```{}
```

## Summary stats for each histogram

Min/Max/Mean

```{r}
summary_stats <- data %>%
  summarise(
    min_date = min(date, na.rm = TRUE),
    max_date = max(date, na.rm = TRUE),
    mean_date = mean(date, na.rm = TRUE),
    min_hour = min(hour, na.rm = TRUE),
    max_hour = max(hour, na.rm = TRUE),
    mean_hour = mean(hour, na.rm = TRUE),
    min_minute = min(minute, na.rm = TRUE),
    max_minute = max(minute, na.rm = TRUE),
    mean_minute = mean(minute, na.rm = TRUE)
  )
summary_stats


# render report
rmarkdown::render("your_document.Rmd")
```
